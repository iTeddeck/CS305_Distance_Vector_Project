#BlueJ class context
comment0.params=portNum\ rTable\ serverSocket\ poison
comment0.target=ListenerThread(int,\ RoutingTable,\ java.net.DatagramSocket,\ boolean)
comment1.params=
comment1.target=void\ run()
comment10.params=
comment10.target=boolean\ calculateDistanceVector()
comment10.text=public\ boolean\ calculateDistanceVector()\ {\r\n\ \ \ \ boolean\ didChange\ \=\ false;\r\n\ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ rTable.outwardIP.get(0).size();i++)\ {\r\n\ \ \ \ System.out.println("here");\r\n\ \ \ \ IPPort\ destLoc\ \=\ rTable.outwardIP.get(0).get(i);\r\n\r\n\ \ \ \ int\ currentCost\ \=\ rTable.costToGet.get(0).get(i);\r\n\ \ \ \ IPPort\ currentNexHop\ \=\ rTable.whereToForward.get(i);\r\n\r\n\ \ \ \ int\ newCost\ \=\ 10000000;\r\n\ \ \ \ IPPort\ newNextHop\ \=\ null;\r\n\r\n\ \ \ \ for(int\ j\ \=\ 0;\ j\ <\ rTable.neighborAddresses.size();\ j++)\ {\r\n\ \ \ \ int\ costToNeighbor\ \=\ rTable.costToNeighbor.get(j);\r\n\r\n\ \ \ \ int\ indexOfDestLocInNeighbor\ \=\ -1;\r\n\ \ \ \ int\ costToDestThroughNeighbor\ \=\ -1;\r\n\ \ \ \ for(int\ k\ \=\ 0;\ k\ <\ rTable.outwardIP.get(j).size();\ k++)\ {\r\n\ \ \ \ if(rTable.outwardIP.get(j).get(k).getIP().equals(destLoc.getIP())\r\n\ \ \ \ &&\ rTable.outwardIP.get(j).get(k).getPort().equals(destLoc.getPort()))\ {\r\n\ \ \ \ indexOfDestLocInNeighbor\ \=\ k;\r\n\ \ \ \ break;\r\n\ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ costToDestThroughNeighbor\ \=\ rTable.costToGet.get(j).get(indexOfDestLocInNeighbor)\ +\ costToNeighbor;\r\n\ \ \ \ if(costToDestThroughNeighbor\ <\ newCost)\ {\r\n\ \ \ \ newCost\ \=\ costToDestThroughNeighbor;\r\n\ \ \ \ newNextHop\ \=\ rTable.neighborAddresses.get(i);\r\n\ \ \ \ }\r\n\ \ \ \ }\r\n\r\n\ \ \ \ if(newCost\ <\ currentCost)\ {\r\n\ \ \ \ rTable.costToGet.get(0).set(i,\ newCost);\r\n\ \ \ \ rTable.outwardIP.get(0).set(i,\ newNextHop);\r\n\ \ \ \ didChange\ \=\ true;\r\n\ \ \ \ }\r\n\ \ \ \ }\r\n\r\n\ \ \ \ return\ didChange;\r\n}
comment11.params=
comment11.target=void\ sendDistanceVector()
comment2.params=messageArray\ ipFrom\ portFrom
comment2.target=void\ alertedNeighbors(java.lang.String[],\ java.lang.String,\ java.lang.String)
comment3.params=
comment3.target=void\ alertNeighbors()
comment4.params=messageArray\ stringIPFrom\ stringPortFrom
comment4.target=void\ parseMessage(java.lang.String[],\ java.lang.String,\ java.lang.String)
comment5.params=messageArray
comment5.target=java.util.ArrayList\ parseCollidedMessage(java.lang.String[])
comment6.params=messageArray\ collidedMessage
comment6.target=java.lang.String\ parseCollidedIndex(java.util.ArrayList,\ java.lang.String)
comment7.params=ipFrom\ portFrom\ newWeight
comment7.target=void\ changeNeighborTable(java.lang.String,\ java.lang.String,\ java.lang.String)
comment8.params=distanceVector\ ipFromString\ portFromString
comment8.target=void\ parseReceivedDV(java.lang.String[],\ java.lang.String,\ java.lang.String)
comment9.params=entryComponent\ indexOfSender
comment9.target=void\ addDVEntryToTable(java.lang.String[],\ int)
numComments=12
